#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <ZMPT101B.h>

// üîå WiFi credentials
#define WIFI_SSID "JARVIS"
#define WIFI_PASSWORD "16112003"

// üî• Firebase credentials
#define FIREBASE_HOST "electrostat-86370-default-rtdb.asia-southeast1.firebasedatabase.app"
#define FIREBASE_AUTH "dL3Y2Bb2L7hzwzG2K8oehiNn4aaKx2rtmffJ3FR0"

// üîß Sensor and Relay Pins
#define ZMPT_PIN 33
#define ZMPT_SENSITIVITY 500.0f
#define CALIBRATION_FACTOR 1.49

#define ZMCT_PHASE_PIN 36
#define ZMCT_NEUTRAL_PIN 39

#define ROOM1CURRENTSENSOR 34 // Kitchen
#define ROOM2CURRENTSENSOR 35 // Living
#define ROOM3CURRENTSENSOR 32 // Office

#define RELAY_PIN 18
#define SURGERELAY_PIN 12
#define EARTHRELAY_PIN 15

// ‚ö° Thresholds
#define OVERVOLTAGE_LIMIT 280.0
#define UNDERVOLTAGE_LIMIT 150.0
#define LEAKAGE_THRESHOLD 0.05  // Amps

// üìä State Variables
int overvoltageCount = 0;
int undervoltageCount = 0;
bool earthfault = 0;
bool powerstatus = 1;
bool kitchenstatus = 1;
bool livingroomstatus = 1;
bool officeroomstatus = 1;

ZMPT101B voltageSensor(ZMPT_PIN, 50.0);

// ‚úÖ Setup
void setup() {
  Serial.begin(115200);

  pinMode(RELAY_PIN, OUTPUT);
  pinMode(EARTHRELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(EARTHRELAY_PIN, LOW);

  voltageSensor.setSensitivity(ZMPT_SENSITIVITY);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Connected to WiFi!");
}

// üîÅ Main Loop
void loop() {
  float voltage = readVoltage();
  float currentPhase = readCurrent(ZMCT_PHASE_PIN);
  float currentNeutral = readCurrent(ZMCT_NEUTRAL_PIN);
  float totalCurrent = max(currentPhase, currentNeutral);
  float powerConsumption = calculatePower(voltage, totalCurrent);

  float kitchenCurrent = readCurrent(ROOM1CURRENTSENSOR);
  float livingCurrent = readCurrent(ROOM2CURRENTSENSOR);
  float officeCurrent = readCurrent(ROOM3CURRENTSENSOR);

  // üåê Send to Firebase Dashboard
  sendToFirebase("/dashboard/currentVoltage", voltage, FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/dashboard/powerConsumption", powerConsumption, FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/dashboard/powerStatus", powerstatus, FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/earthfault", earthfault, FIREBASE_HOST, FIREBASE_AUTH);

  // üè† Room Info
  kitchenroom(kitchenCurrent, voltage);
  livingroom(livingCurrent, voltage);
  officeroom(officeCurrent, voltage);

  handleOvervoltage(voltage);
  handleUndervoltage(voltage);
  RCCB(currentPhase, currentNeutral);

  delay(1000);  // refresh rate
}

// üìê Voltage Reading
float readVoltage() {
  return voltageSensor.getRmsVoltage() * CALIBRATION_FACTOR;
}

// ‚ö° Current Reading
float readCurrent(int pin) {
  int maxVal = 0, minVal = 4095;
  unsigned long start = millis();
  while (millis() - start < 100) {
    int val = analogRead(pin);
    maxVal = max(maxVal, val);
    minVal = min(minVal, val);
  }
  float amplitude = (maxVal - minVal) / 2.0;
  float voltage = (amplitude * 3.3) / 4095.0;
  return voltage / 0.066;  // for ZMCT103C
}

// ‚ö° Total Power
float calculatePower(float voltage, float current) {
  float power = voltage * current;
  powerstatus = (power >= 10);
  Serial.print("‚ö° Power: "); Serial.print(power); Serial.println(" W");
  return power;
}

// üè† Kitchen
void kitchenroom(float current, float voltage) {
  float power = current * voltage;
  kitchenstatus = (power >= 10);

  sendToFirebase("/rooms/kitchen/name", "Kitchen", FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/rooms/kitchen/power", power, FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/rooms/kitchen/status", kitchenstatus, FIREBASE_HOST, FIREBASE_AUTH);
}

// üõãÔ∏è Living Room
void livingroom(float current, float voltage) {
  float power = current * voltage;
  livingroomstatus = (power >= 10);

  sendToFirebase("/rooms/living/name", "Living", FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/rooms/living/power", power, FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/rooms/living/status", livingroomstatus, FIREBASE_HOST, FIREBASE_AUTH);
}

// üßë‚Äçüíª Office
void officeroom(float current, float voltage) {
  float power = current * voltage;
  officeroomstatus = (power >= 10);

  sendToFirebase("/rooms/office/name", "Office", FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/rooms/office/power", power, FIREBASE_HOST, FIREBASE_AUTH);
  sendToFirebase("/rooms/office/status", officeroomstatus, FIREBASE_HOST, FIREBASE_AUTH);
}

// ‚ö†Ô∏è Overvoltage
void handleOvervoltage(float voltage) {
  if (voltage > OVERVOLTAGE_LIMIT) {
    digitalWrite(RELAY_PIN, HIGH);
    overvoltageCount++;
    Serial.println("‚ö†Ô∏è Overvoltage Detected!");
    sendToFirebase("/OvervoltageCount", overvoltageCount, FIREBASE_HOST, FIREBASE_AUTH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }
}

// ‚ö†Ô∏è Undervoltage
void handleUndervoltage(float voltage) {
  if (voltage < UNDERVOLTAGE_LIMIT) {
    digitalWrite(RELAY_PIN, HIGH);
    undervoltageCount++;
    Serial.println("‚ö†Ô∏è Undervoltage Detected!");
    sendToFirebase("/UndervoltageCount", undervoltageCount, FIREBASE_HOST, FIREBASE_AUTH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }
}

// ‚ö° RCCB Logic
void RCCB(float currentPhase, float currentNeutral) {
  float diff = abs(currentPhase - currentNeutral);
  if (diff > LEAKAGE_THRESHOLD) {
    Serial.println("‚ö†Ô∏è Leakage Detected!");
    earthfaultRelayTrip();
    sendToFirebase("/LeakageCurrent", diff, FIREBASE_HOST, FIREBASE_AUTH);
  }
}

// ‚ö° Earth Fault Relay
void earthfaultRelayTrip() {
  digitalWrite(EARTHRELAY_PIN, HIGH);
  earthfault = 1;
  Serial.println("‚ö° Earth fault occurred. Relay Turned ON");
}

// üì§ Firebase PUT ‚Äì Float
bool sendToFirebase(const char* path, float value, const char* host, const char* auth) {
  if (WiFi.status() != WL_CONNECTED) return false;

  HTTPClient http;
  String url = "https://" + String(host) + path + ".json?auth=" + String(auth);
  String payload = String(value, 2);

  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  int httpCode = http.PUT(payload);

  Serial.printf("%s %s: %s\n", httpCode == 200 ? "‚úÖ Sent" : "‚ùå Failed", path, payload.c_str());
  http.end();
  return (httpCode == 200);
}

// üì§ Firebase PUT ‚Äì String
bool sendToFirebase(const char* path, String value, const char* host, const char* auth) {
  if (WiFi.status() != WL_CONNECTED) return false;

  HTTPClient http;
  String url = "https://" + String(host) + path + ".json?auth=" + String(auth);
  String payload = "\"" + value + "\"";

  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  int httpCode = http.PUT(payload);

  Serial.printf("%s %s: %s\n", httpCode == 200 ? "‚úÖ Sent" : "‚ùå Failed", path, payload.c_str());
  http.end();
  return (httpCode == 200);
}
