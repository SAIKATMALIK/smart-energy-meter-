// Hardware Configuration
const int PHASE_PIN = 34;
const int NEUTRAL_PIN = 35;
const int relayPin = 15;

// Sensor Settings
const float SENSITIVITY = 0.042; // ACS712-30A sensitivity (V/A)
const float VCC = 5.0;
const float ESP_ADC_REF = 3.3;
const int ADC_MAX = 4095;

// Measurement Settings
const int SAMPLES = 200;
const float NOISE_FLOOR = 0.010;
const float CORRECTION_FACTOR = 0.344;

// Calibration
float phaseOffsetV = 0;
float neutralOffsetV = 0;
bool calibrated = false;

// Rolling average window
const int AVG_WINDOW = 50;
float leakageHistory[AVG_WINDOW] = {0};
int leakageIndex = 0;
bool bufferFilled = false;

// Error threshold
const float ERROR_BAND = 0.015;  // ±15mA

// Stability filter
const int ALARM_TRIGGER_COUNT = 3;
int alarmCounter = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);

  Serial.println("\nStarting Current Monitor");
  Serial.println("Calibrating sensors...");
  calibrateSensors();
  Serial.println("Calibration Complete");
  Serial.print("Phase Offset: "); Serial.print(phaseOffsetV, 4); Serial.println(" V");
  Serial.print("Neutral Offset: "); Serial.print(neutralOffsetV, 4); Serial.println(" V");
  Serial.println("\nMonitoring started...");
  calibrated = true;
}

void loop() {
  static unsigned long lastPrint = 0;
  if (!calibrated) return;

  float phaseI = getRMSCurrent(PHASE_PIN, phaseOffsetV) * CORRECTION_FACTOR;
  float neutralI = getRMSCurrent(NEUTRAL_PIN, neutralOffsetV) * CORRECTION_FACTOR;
  float leakage = abs(phaseI - neutralI);

  if (millis() - lastPrint >= 1000) {
    phaseI = (phaseI < NOISE_FLOOR) ? 0 : phaseI;
    neutralI = (neutralI < NOISE_FLOOR) ? 0 : neutralI;
    leakage = (leakage < NOISE_FLOOR) ? 0 : leakage;

    leakageHistory[leakageIndex] = leakage;
    leakageIndex = (leakageIndex + 1) % AVG_WINDOW;
    if (leakageIndex == 0) bufferFilled = true;

    float sum = 0;
    int count = bufferFilled ? AVG_WINDOW : leakageIndex;
    for (int i = 0; i < count; i++) sum += leakageHistory[i];
    float avgLeakage = sum / count;

    float lowerLimit = avgLeakage - ERROR_BAND;
    float upperLimit = avgLeakage + ERROR_BAND;
    bool alarm = (leakage < lowerLimit || leakage > upperLimit) && bufferFilled;

    // Require alarm condition to persist N times
    if (alarm) {
      alarmCounter++;
    } else {
      alarmCounter = max(0, alarmCounter - 1);
    }

    // Only trigger relay if stable alarm detected
    bool finalAlarm = (alarmCounter >= ALARM_TRIGGER_COUNT);
    digitalWrite(relayPin, finalAlarm ? HIGH : LOW);

    Serial.print("Phase: "); Serial.print(phaseI, 3); Serial.print(" A | ");
    Serial.print("Neutral: "); Serial.print(neutralI, 3); Serial.print(" A | ");
    Serial.print("Leakage: "); Serial.print(leakage, 3); Serial.print(" A | ");
    Serial.print("Avg: "); Serial.print(avgLeakage, 3); Serial.print(" A | ");
    Serial.print("Band: ±"); Serial.print(ERROR_BAND, 3); Serial.print(" A | ");
    Serial.print("Alarm Count: "); Serial.print(alarmCounter);
    if (finalAlarm) Serial.print(" => TRIPPED");
    Serial.println();

    lastPrint = millis();
  }
}

void calibrateSensors() {
  const int CAL_SAMPLES = 500;
  float phaseSum = 0, neutralSum = 0;

  Serial.println("Beginning calibration...");
  for (int i = 0; i < CAL_SAMPLES; i++) {
    phaseSum += analogRead(PHASE_PIN);
    neutralSum += analogRead(NEUTRAL_PIN);
    if (i % 100 == 0) Serial.print(".");
    delay(2);
  }

  phaseOffsetV = (phaseSum / CAL_SAMPLES) * (ESP_ADC_REF / ADC_MAX);
  neutralOffsetV = (neutralSum / CAL_SAMPLES) * (ESP_ADC_REF / ADC_MAX);
  Serial.println("\nCalibration done");
}

float getRMSCurrent(int pin, float offsetV) {
  float sumSq = 0;
  for (int i = 0; i < SAMPLES; i++) {
    float sensorV = analogRead(pin) * (ESP_ADC_REF / ADC_MAX);
    float current = (sensorV - offsetV) * (VCC / ESP_ADC_REF) / SENSITIVITY;
    sumSq += current * current;
    delayMicroseconds(200);
  }
  return sqrt(sumSq / SAMPLES);
}
