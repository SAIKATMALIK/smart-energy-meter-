// Hardware Configuration
const int PHASE_PIN = 34;
const int NEUTRAL_PIN = 35;
const int relayPin = 15;

// Sensor Settings
const float SENSITIVITY = 0.042; // ACS712-30A sensitivity (V/A)
const float VCC = 5.0;          
const float ESP_ADC_REF = 3.3;  
const int ADC_MAX = 4095;       
const float ZERO_V = VCC / 2;   

// Measurement Settings
const int SAMPLES = 200;        
const float NOISE_FLOOR = 0.010;

// Calibration Values
float phaseOffsetV = 0;
float neutralOffsetV = 0;
bool calibrated = false;

// Correction factor based on expected vs measured
// For example: expected 0.86A, measured 2.5A â†’ factor = 0.86 / 2.5 = 0.344
const float CORRECTION_FACTOR = 0.344;

void setup() {
  Serial.begin(115200);
  while(!Serial);
  
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);
  
  Serial.println("\nStarting Current Monitor");
  Serial.println("Calibrating sensors...");
  
  calibrateSensors();
  
  Serial.println("\nCalibration Complete");
  Serial.print("Phase Offset: "); Serial.print(phaseOffsetV, 4); Serial.println(" V");
  Serial.print("Neutral Offset: "); Serial.print(neutralOffsetV, 4); Serial.println(" V");
  Serial.println("\nMonitoring started...");
  calibrated = true;
}

void loop() {
  static unsigned long lastPrint = 0;
  
  if(!calibrated) return;
  
  float phaseI = getRMSCurrent(PHASE_PIN, phaseOffsetV) * CORRECTION_FACTOR;
  float neutralI = getRMSCurrent(NEUTRAL_PIN, neutralOffsetV) * CORRECTION_FACTOR;
  float leakage = abs(phaseI - neutralI);

  if(millis() - lastPrint >= 1000) {
    phaseI = (phaseI < NOISE_FLOOR) ? 0 : phaseI;
    neutralI = (neutralI < NOISE_FLOOR) ? 0 : neutralI;
    leakage = (leakage < NOISE_FLOOR) ? 0 : leakage;
    
    Serial.print("Phase: "); Serial.print(phaseI, 3); Serial.print(" A | ");
    Serial.print("Neutral: "); Serial.print(neutralI, 3); Serial.print(" A | ");
    Serial.print("Leakage: "); Serial.print(leakage, 3); Serial.println(" A");

    bool alarm = leakage > 0.030;
    digitalWrite(relayPin, alarm ? HIGH : LOW);
    if(alarm) Serial.println("ALARM: Leakage detected!");
    
    lastPrint = millis();
  }
}

void calibrateSensors() {
  const int CAL_SAMPLES = 500;
  float phaseSum = 0, neutralSum = 0;
  
  Serial.println("Beginning calibration...");
  
  for(int i = 0; i < CAL_SAMPLES; i++) {
    phaseSum += analogRead(PHASE_PIN);
    neutralSum += analogRead(NEUTRAL_PIN);
    
    if(i % 100 == 0) Serial.print(".");
    delay(2);
  }

  phaseOffsetV = (phaseSum / CAL_SAMPLES) * (ESP_ADC_REF / ADC_MAX);
  neutralOffsetV = (neutralSum / CAL_SAMPLES) * (ESP_ADC_REF / ADC_MAX);
  
  Serial.println("\nCalibration done");
}

float getRMSCurrent(int pin, float offsetV) {
  float sumSq = 0;
  
  for(int i = 0; i < SAMPLES; i++) {
    float sensorV = analogRead(pin) * (ESP_ADC_REF / ADC_MAX);
    float current = (sensorV - offsetV) * (VCC / ESP_ADC_REF) / SENSITIVITY;
    sumSq += current * current;
    delayMicroseconds(200);
  }
  
  return sqrt(sumSq / SAMPLES);
}
