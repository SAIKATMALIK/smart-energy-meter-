// Hardware Configuration
const int PHASE_PIN = 34;
const int NEUTRAL_PIN = 35;
const int relayPin = 15;
const int resetButtonPin = 0; // Example pin for reset button (connect button between this pin and GND)

// Sensor Settings
const float SENSITIVITY = 0.042; // ACS712-30A sensitivity (V/A)
const float VCC = 5.0;
const float ESP_ADC_REF = 3.3;
const int ADC_MAX = 4095;

// Measurement Settings
const int SAMPLES = 200;
const float NOISE_FLOOR = 0.010;
const float CORRECTION_FACTOR = 0.344;

// Calibration
float phaseOffsetV = 0;
float neutralOffsetV = 0;
bool calibrated = false;

// Trip Settings
const float LEAKAGE_THRESHOLD = 0.300; // 0.300 A threshold for trip
const float RESET_THRESHOLD = 0.240;   // 80% of trip threshold for hysteresis
const unsigned long TRIP_DEBOUNCE_TIME = 1000; // 1 second debounce
bool isTripped = false;
unsigned long tripTime = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial);
  
  pinMode(relayPin, OUTPUT);
  pinMode(resetButtonPin, INPUT_PULLUP); // For reset button
  digitalWrite(relayPin, LOW);
  
  Serial.println("\nStarting Current Monitor");
  Serial.println("Calibrating sensors...");
  calibrateSensors();
  
  Serial.println("Calibration Complete");
  Serial.print("Phase Offset: "); Serial.print(phaseOffsetV, 4); Serial.println(" V");
  Serial.print("Neutral Offset: "); Serial.print(neutralOffsetV, 4); Serial.println(" V");
  Serial.println("\nMonitoring started...");
  
  calibrated = true;
}

void loop() {
  static unsigned long lastPrint = 0;
  
  if (!calibrated) return;

  // Read currents
  float phaseI = getRMSCurrent(PHASE_PIN, phaseOffsetV) * CORRECTION_FACTOR;
  float neutralI = getRMSCurrent(NEUTRAL_PIN, neutralOffsetV) * CORRECTION_FACTOR;
  float leakage = abs(phaseI - neutralI);

  // Apply noise floor
  phaseI = (phaseI < NOISE_FLOOR) ? 0 : phaseI;
  neutralI = (neutralI < NOISE_FLOOR) ? 0 : neutralI;
  leakage = (leakage < NOISE_FLOOR) ? 0 : leakage;

  // Trip logic with debouncing and hysteresis
  if (!isTripped) {
    if (leakage > LEAKAGE_THRESHOLD) {
      if (tripTime == 0) {
        tripTime = millis(); // Start debounce timer
      } 
      else if (millis() - tripTime > TRIP_DEBOUNCE_TIME) {
        digitalWrite(relayPin, HIGH); // Trip the relay
        isTripped = true;
        Serial.println("TRIPPED - Ground fault detected!");
      }
    } else {
      tripTime = 0; // Reset debounce timer if below threshold
    }
  } 
  else {
    // In tripped state - only reset if below reset threshold AND button pressed
    if (leakage < RESET_THRESHOLD && digitalRead(resetButtonPin) == LOW) {
      resetTrip();
    }
  }

  // Periodic printing
  if (millis() - lastPrint >= 1000) {
    Serial.print("Phase: "); Serial.print(phaseI, 3); Serial.print(" A | ");
    Serial.print("Neutral: "); Serial.print(neutralI, 3); Serial.print(" A | ");
    Serial.print("Leakage: "); Serial.print(leakage, 3); Serial.print(" A | ");
    
    if (isTripped) {
      Serial.println("=> TRIPPED (LATCHED)");
    } else {
      Serial.println();
    }
    
    lastPrint = millis();
  }
}

void calibrateSensors() {
  const int CAL_SAMPLES = 500;
  float phaseSum = 0, neutralSum = 0;
  
  Serial.println("Beginning calibration...");
  for (int i = 0; i < CAL_SAMPLES; i++) {
    phaseSum += analogRead(PHASE_PIN);
    neutralSum += analogRead(NEUTRAL_PIN);
    if (i % 100 == 0) Serial.print(".");
    delay(2);
  }
  
  phaseOffsetV = (phaseSum / CAL_SAMPLES) * (ESP_ADC_REF / ADC_MAX);
  neutralOffsetV = (neutralSum / CAL_SAMPLES) * (ESP_ADC_REF / ADC_MAX);
  Serial.println("\nCalibration done");
}

float getRMSCurrent(int pin, float offsetV) {
  float sumSq = 0;
  for (int i = 0; i < SAMPLES; i++) {
    float sensorV = analogRead(pin) * (ESP_ADC_REF / ADC_MAX);
    float current = (sensorV - offsetV) * (VCC / ESP_ADC_REF) / SENSITIVITY;
    sumSq += current * current;
    delayMicroseconds(200);
  }
  return sqrt(sumSq / SAMPLES);
}

void resetTrip() {
  isTripped = false;
  tripTime = 0;
  digitalWrite(relayPin, LOW);
  Serial.println("System reset - relay re-engaged");
}
