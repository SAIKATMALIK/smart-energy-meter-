//overcurrent protection for each room.



// Hardware Configuration
const int CURRENT_PIN = 34;      // ACS712 connected to GPIO34
const int RELAY_PIN = 15;        // Relay control pin

// ACS712-30A Settings
const float SENSITIVITY = 0.042; // 42mV/A sensitivity (VCC = 5V)
const float VCC = 5.0;           // Sensor operating voltage
const float ADC_REF = 3.3;       // ESP32 ADC reference
const int ADC_MAX = 4095;        // 12-bit ADC maximum value

// Measurement Settings
const int SAMPLES = 200;         // Samples per measurement
const float NOISE_FILTER = 0.01; // 0.01 A = 10mA noise floor

// Protection Settings (ALL VALUES IN AMPS)
const float OVERCURRENT_THRESHOLD = 0.96f; // TRIP AT EXACTLY 0.96 AMPS
const int TRIP_DELAY_MS = 2000;  // 2 second delay before auto-reset

// Calibration
float zeroVoltage = 0;           // Stores sensor's zero-current voltage
bool isTripped = false;          // Overcurrent trip status
unsigned long tripTime = 0;      // When the trip occurred

void setup() {
  Serial.begin(115200);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);  // Start with relay OFF
  
  calibrateSensor();
  Serial.println("\nPhase Current Monitor Ready");
  Serial.print("Overcurrent Threshold: ");
  Serial.print(OVERCURRENT_THRESHOLD, 3);
  Serial.println(" A (960 mA)");
}

void loop() {
  float current = getRMSCurrent() * 0.344; // Apply correction factor
  
  // Filter noise (10mA cutoff)
  if (current < NOISE_FILTER) current = 0;
  
  // Protection check
  overcurrenttrip(current);
  
  // Display every second
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint >= 1000) {
    Serial.print("Current: "); 
    Serial.print(current, 3); 
    Serial.print(" A (");
    Serial.print(current * 1000, 0);
    Serial.print(" mA)");
    
    if (isTripped) {
      Serial.println(" [TRIPPED]");
    } else if (current > OVERCURRENT_THRESHOLD * 0.8) {
      Serial.println(" [WARNING]");
    } else {
      Serial.println(" [NORMAL]");
    }
    
    lastPrint = millis();
  }
}

void calibrateSensor() {
  Serial.println("Calibrating... (ensure no current is flowing)");
  
  long sum = 0;
  for (int i = 0; i < 500; i++) {
    sum += analogRead(CURRENT_PIN);
    delay(2);
  }
  
  zeroVoltage = (sum / 500.0) * (ADC_REF / ADC_MAX);
  Serial.print("Calibration complete. Zero point: ");
  Serial.print(zeroVoltage, 4);
  Serial.println(" V");
}

float getRMSCurrent() {
  float sumSquares = 0;
  
  for (int i = 0; i < SAMPLES; i++) {
    float voltage = analogRead(CURRENT_PIN) * (ADC_REF / ADC_MAX);
    float current = (voltage - zeroVoltage) * (VCC / ADC_REF) / SENSITIVITY;
    sumSquares += current * current;
    delayMicroseconds(200);
  }
  
  return sqrt(sumSquares / SAMPLES);
}

// (Previous code remains exactly the same until overcurrenttrip function)

void overcurrenttrip(float current) {
  // Check if current exceeds threshold (0.96A)
  if (current >= OVERCURRENT_THRESHOLD && !isTripped) {
    digitalWrite(RELAY_PIN, HIGH);  // Cut power
    isTripped = true;
    tripTime = millis();
    Serial.print("\n!TRIPPED AT ");
    Serial.print(current, 3);
    Serial.println(" A!");
    Serial.print(alertmssg()); // Print alert message when tripping
  }

  // Auto-reset after delay if current is safe
  if (isTripped && (millis() - tripTime >= TRIP_DELAY_MS) 
      && current < (OVERCURRENT_THRESHOLD * 0.5)) {
    digitalWrite(RELAY_PIN, LOW);
    isTripped = false;
    Serial.print("\nAUTO-RESET: Power restored");
    Serial.print(alertmssg()); // Print alert message when restoring
  }
}

String alertmssg() {  // Fixed typo in function name (was alertmssg)
  if(isTripped) {
    return "ALERT: Overcurrent detected! System tripped!";
  } else {
    return "STATUS: System normal. No faults.";
  }

}
