const int PHASE_PIN = 34;    // Phase current sensor
const int NEUTRAL_PIN = 35;  // Neutral current sensor
const int EARTH_PIN = 32;    // Earth current sensor
const int RELAY_PIN = 15;    // Relay control (LOW = ON)
const int BUTTON_PIN = 18;   // Reset button (LOW when pressed)
const int LED_PIN = 17;      // Fault LED

// Protection settings
const float TRIP_THRESHOLD = 200;  // 50mA earth current trip threshold
const float IMBALANCE_THRESHOLD = 200; // 20mA phase-neutral difference threshold
unsigned long lastButtonPress = 0;
bool systemTripped = false;

// Calibration values (will be set during calibration)
float phaseOffset = 2047.5;  // Midpoint of 12-bit ADC (4095/2)
float neutralOffset = 2047.5;
float earthOffset = 2047.5;

void setup() {
Serial.begin(115200);
  pinMode(RELAY_PIN, OUTPUT);
 pinMode(BUTTON_PIN, INPUT_PULLUP);


   digitalWrite(RELAY_PIN, LOW);// at starting relay is on 

  Serial.println("\nStarting system initialization...");

   Serial.println("CALIBRATION - Ensure NO current is flowing!");
  delay(2000); // Give time to ensure no current
  
  calibrateSensors();
  
  Serial.println("\nSystem Ready");
  Serial.println("Phase(mA)\tNeutral(mA)\tEarth(mA)\tStatus");
  Serial.println("--------------------------------------------------");

}

void loop() {
  // put your main code here, to run repeatedly:


   float phaseCurrent = getCurrent(PHASE_PIN, phaseOffset);
  float neutralCurrent = getCurrent(NEUTRAL_PIN, neutralOffset);
  float earthCurrent = getCurrent(EARTH_PIN, earthOffset);


   printCurrents(phaseCurrent, neutralCurrent, earthCurrent);


  if (!systemTripped) {
    checkProtection(phaseCurrent, neutralCurrent, earthCurrent);

 handleResetButton();
  
  delay(100);

  }


}



void calibrateSensors() {
  Serial.println("Calibrating sensors...");
  
  // Take 1000 samples for each sensor to get accurate zero point
  phaseOffset = getAverageReading(PHASE_PIN, 1000, "Phase");
  neutralOffset = getAverageReading(NEUTRAL_PIN, 1000, "Neutral");
  earthOffset = getAverageReading(EARTH_PIN, 1000, "Earth");
  
  Serial.println("Calibration complete");
  Serial.print("Phase offset: "); Serial.println(phaseOffset);
  Serial.print("Neutral offset: "); Serial.println(neutralOffset);
  Serial.print("Earth offset: "); Serial.println(earthOffset);
}


float getAverageReading(int pin, int samples, const char* name) {
  Serial.print("Calibrating "); Serial.print(name); Serial.println(" sensor...");
  long sum = 0;
  for (int i = 0; i < samples; i++) {
    sum += analogRead(pin);
    delay(1);
  }
  return sum / float(samples);
}




float getCurrent(int pin, float offset) {
  // Take 100 readings for stable measurement
  float sum = 0;
  for (int i = 0; i < 100; i++) {
    sum += analogRead(pin);
    delay(1);
  }
  float average = sum / 100.0;
    float voltage = (average - offset) * (5.0 / 4095.0);
  float current = voltage / 0.066 * 1000;
   if (abs(current) < 5.0) return 0;
  return current;\
}


void printCurrents(float phase, float neutral, float earth) {
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint < 500) return;
  lastPrint = millis();
  
  Serial.print(phase, 1);
  Serial.print(" mA\t\t");
  Serial.print(neutral, 1);
  Serial.print(" mA\t\t");
  Serial.print(earth, 1);
  Serial.print(" mA\t\t");
  
  if (systemTripped) {
    Serial.println("TRIPPED");
  } else {
    Serial.println("NORMAL");
  }
}



void checkProtection(float phase, float neutral, float earth) {
  // Check for earth fault condition
  bool earthFault = abs(earth) > TRIP_THRESHOLD;
  
  // Check for phase-neutral imbalance
  bool imbalance = abs(phase - neutral) > IMBALANCE_THRESHOLD;
  
  if (earthFault || imbalance) {
    tripSystem();
    
    Serial.println("!!! FAULT DETECTED !!!");
    if (earthFault) {
      Serial.print("Earth current: ");
      Serial.print(earth, 1);
      Serial.println(" mA (TRIP)");
    }
    if (imbalance) {
      Serial.print("Phase-Neutral imbalance: ");
      Serial.print(abs(phase - neutral), 1);
      Serial.println(" mA");
    }
  }
}

void handleResetButton() {
  if (digitalRead(BUTTON_PIN) == LOW && millis() - lastButtonPress > 1000) {
    lastButtonPress = millis();
    
    Serial.println("\nReset button pressed...");
    
    // Get fresh current readings
    float phase = getCurrent(PHASE_PIN, phaseOffset);
    float neutral = getCurrent(NEUTRAL_PIN, neutralOffset);
    float earth = getCurrent(EARTH_PIN, earthOffset);
    
    // Check if conditions are safe to reset
    if (abs(earth) < TRIP_THRESHOLD || abs(phase - neutral) <= IMBALANCE_THRESHOLD) {
      resetSystem();
    } else {
      Serial.println("Reset blocked - Fault still present!");
      if (abs(earth) >= TRIP_THRESHOLD) {
        Serial.print("Earth current: ");
        Serial.print(earth, 1);
        Serial.println(" mA");
      }
      if (abs(phase - neutral) > IMBALANCE_THRESHOLD) {
        Serial.print("Imbalance: ");
        Serial.print(abs(phase - neutral), 1);
        Serial.println(" mA");
      }
    }
  }
}





























